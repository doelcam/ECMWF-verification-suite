%manual
NAME

  plot_acc_map - Plots maps of the anomaly correlation, spread, RMS and perfect model ACC

DESCRIPTION

  Plots the ensemble-mean anomaly correlation against verification and in perfect
  model approach, the spread and the RMSE. Deals with maps.

%end
%include <head.h>
%include <trap.h>
echo "start of plot_acc_map.sms"
date
#
%include <sms_vars.h>
if [[ -a $SMSWORK ]] ; then
   cd $SMSWORK
else
   mkdir -p $SMSWORK
   cd $SMSWORK
fi
%include <config.h>
%include <def_exp2.h>
%include <def_exp3.h>

#
export MAGPLUS_VERSION=new
use magics++

#
# Get running date
#
typeset -Z2 DAY
DAY=`date | cut -c9-10`
MON=`date | cut -c5-7`
YEA=`date | cut -c25-28`
DATE=${DAY}${MON}${YEA}
#
ie=%NUM%
if [[ $ie -ne 0 ]] ; then
   sleep 100
fi
#
set -A DIAG_LIST ACC ACP SPR MSS RSR
typeset -Z5 NSAM
NSAM=$ACC_NSAM
PLOT_SIG=0 # Switch to plot all significant values (0), only positive (1) or only negative (-1) for BSS and ROCSS
#
# Create gif directory, if not already existent
#
for ecdir in ${SMSGIF}/giffiles ; do
    if [[ -a $ecdir ]] ; then
       echo "directory for $ecdir exists already"
    else
       mkdir $ecdir
    fi
done
#
# Header for web page
#
if [[ $ACSP_GIF = 1 ]] ; then
   if [[ -s ${SMSGIF}/PopBox/scripts/PopBox.js ]] ; then
      echo "Java script present"
   else
      cp -r /home/rd/ney/SkinLayer/sh/PopBox/ ${SMSGIF}/.
   fi
cat>acc_map_$ie.html<<EOF
<html><head>
<title>Summary of deterministic maps for experiment $ie</title>
<link id="lnkStyleSheet" rel="stylesheet" type="text/css" href="PopBox/stylesheets/Styles.css" />
<script src="PopBox/scripts/PopBox.js"  type="text/javascript"></script>
</head>
<body>
EOF
fi
#
ecdir=psfiles
#
# Get and compile fortran files
# use plot_acc_map_new.f 

#
if [[ -s plot_acc_map.x ]] ; then
   echo "Executable exists"
else
   if [[ $ie -eq 0 ]] ; then
      #cp ${PATHSO}/plot_acc_map.f .
      cp ${PATHSO}/plot_acc_map_new.f .
      cp ${PATHSO}/tools.f .
      cp ${PATHSO}/tools_plot.f .
##      use magics
##      pgf90 $COMPOP1 plot_acc_map.f tools.f tools_plot.f -o plot_acc_map.x $LINKLI2 $LINKLI1 $LINKLI3
##     use newmagics++
##     pgf90 -tp px -r8 plot_acc_map.f tools.f tools_plot.f -o plot_acc_map.x $MAGPLUSLIB_SHARED $LINKLI1 $LINKLI3
     ld=""
     pgf90 -g plot_acc_map_new.f tools.f tools_plot.f -o plot_acc_map.x $LINKLI1  $LINKLI3 $MAGPLUSLIB_SHARED
   else
      echo "Compile by hand"
   fi
fi
ls -ltr plo*.x
#
# Identification of experiments
#
if [[ $ie -lt $NUMMOD ]] ; then
   export EXPID=${EXP_LIST[$ie]}
   export TYPID=${TYP_LIST[$ie]}
   export ORIID=${ORI_LIST[$ie]}
   export CLAID=${CLA_LIST[$ie]}
   export METID=${MET_LIST[$ie]}
   export SYSID=${SYS_LIST[$ie]}
   export STRID=${STR_LIST[$ie]}
   export NENS=${NEN_LIST[$ie]}
%include <def_exp1.h>
else
%include <sms_vars.h>
%include <def_exp3.h>
fi

EXPTIT='ECMWF'

#
# Loop over months
#
im=0
for MM in ${MM_LIST[*]} ; do
    DD=${DD_LIST[$im]}
    TT=${TT_LIST[$im]}
#
# Loop over diagnostic tar files
#
    ROOT1=${EXPID_LONG}_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
    id=0
    for DIAG in ${DIAG_LIST[*]} ; do
        TARDIR="${DIAG}.${JOB_ID}"
        \rm -rf ${TARDIR}
        mkdir -p ${TARDIR}
        cp plot_acc_map.x ${TARDIR}/.
        cp LSM* ${TARDIR}/.
        cd ${TARDIR}
#
# Check if the specific tar file already exists
#
        ECMISS[$id]=0 # This is 0 in case the tar file exists in ECFS
        ecp -o ec:${ECDISK_LONG}/${ecdir}/${DIAG}_${ROOT1}_ps.tar . || echo "${DIAG}_${ROOT1}_ps.tar missing in ECFS"
        if [[ -s ${DIAG}_${ROOT1}_ps.tar ]] ; then
           tar xvf ${DIAG}_${ROOT1}_ps.tar
           \rm -f ${DIAG}_${ROOT1}_ps.tar
           echo "WARNING: Files for the experiment already exist"
           echo "If you want to create new ones, force their creation in the definition file"
        else
           ECMISS[$id]=1 # This is 1 because the whole tar archive will be created and archived
           mkdir ${ecdir}
           echo "All the files will be created and a new tar file archived"
        fi
        cd ..
        id=$((id+1))
    done #DIAG
#
# Loop over fields
#
    iz=0
    while [[ $iz -le $TOT_ALL_PAR ]] ; do
          PAR=${ALL_PAR[$iz]}
          LEV=${ALL_LEV[$iz]}
          YYS=$YY1
          YYE=$YY2
          if [[ $PAR = 228 ]] ; then
             if [[ $YY1 -lt $YY1_228 ]] ; then
                YYS=$YY1_228
             fi
          fi
          ROOT2=${EXPID_LONG}_${YYS}-${YYE}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
#
# Loop over lead time periods
#
          ip=0
          while [[ $ip -le $TOT_ALL_DIA ]] ; do
                IAFCM=${ALL_IAFCM[$ip]}
                IEFCM=${ALL_IEFCM[$ip]}
#
# Loop over diagnostics
#
                id=0
                for DIAG in ${DIAG_LIST[*]} ; do
                    TARDIR="${DIAG}.${JOB_ID}"
                    cd ${TARDIR}
                    plot_map=1
                    FILE=${DIAG}_${ROOT2}_${PAR}_${LEV}_${IAFCM}-${IEFCM}
                    if [[ $DIAG != 'ACP' && $DIAG != 'SPR' ]] ; then
                       if [[ $ACC_BOOT -eq 1 ]] ; then
                          FILE=${FILE}_S${NSAM}
                       fi
                    fi
                    if [[ -s ${ecdir}/${FILE}.ps ]] ; then
                       echo "The file ${FILE}.ps exists"
                    else
                       echo "The file ${FILE}.ps will be created"
                       plot_map=2
                    fi
                    if [[ $FORCEACC = 1 ]] ; then
                       plot_map=2
                    fi
#
cat > plo_acc_map_$ie << EOF
 &control
  nx=${NX},
  ny=${NY},
  nens=${NENS},
  iyy1=${YYS},
  iyy2=${YYE},
  imm=${MM},
  idd=${DD},
  itt=${TT},
  cros=${CROS},
  ipar=${PAR},
  ilev=${LEV},
  anin=${ANIN},
  nf1=${IAFCM},
  nf2=${IEFCM},
  expt='${EXPID_LONG}',
  expid='${EXPTIT}',
  boot=${ACC_BOOT},
  nsam=${ACC_NSAM},
  topth=${ACC_TOPTH},
  botth=${ACC_BOTTH},
  plsi=${PLOT_SIG},
  dia='${DIAG}',
 /
EOF
                    if [[ $plot_map -eq 2 ]] ; then
#
# Copy archive with the output of calculations
#
                       if [[ -s ${DIAG}_${ROOT1}.tar ]] ; then
                          echo "Results already available"
                       else
                          ecp -o ec:${ECDISK_LONG}/acc/${DIAG}_${ROOT1}.tar . || echo "${DIAG}_${ROOT1}.tar missing in ECFS"
                          tar xvf ${DIAG}_${ROOT1}.tar
                       fi

                       ./plot_acc_map.x < plo_acc_map_$ie
                       ECMISS[$id]=1 # The new tar file will have to be archived in ECFS
#
# Collect results if a new file has been produced
#
                       if [[ -s ${ecdir}/${FILE}.ps ]] ; then
                             echo "File ${ecdir}/${FILE}.ps correctly created"
                       else
                          echo "There is a problem; the file ${ecdir}/${FILE}.ps is supposed to exist"
                          exit
                       fi
                    fi
                    if [[ $ACSP_GIF = 1 ]] ; then
                       if [[ -s ${ecdir}/${FILE}.ps ]] ; then
                          convert -rotate 90 ${ecdir}/${FILE}.ps ${SMSGIF}/giffiles/${FILE}.gif
cat>>../acc_map_$ie.html<<EOF
<div style="margin: 0.5em 0.8em 0.5em 0; float:left">
<img id="$FILE.gif" alt="$FILE.gif"
src="giffiles/$FILE.gif"
pbshowcaption="true"
pbcaption="$FILE.gif"
style="width: 525px; height: 350px;"
class="PopBoxImageSmall" title="Click to magnify/shrink"
onclick="Pop(this,50,'PopBoxImageLarge');" /><br />
<span style="font-size:xx-small">$FILE.gif</span>
</div>
EOF
                       fi
                    fi
                    cd ..
                    id=$((id+1))
                done #id (diagnostics)
                ip=$((ip+1))
          done #ip (lead time periods)
          iz=$((iz+1))
    done #iz
#
# Copy in ECFS if required; only do it if ECSTORE is 1 and either the tar file was 
# previously missing or a new postscript file has been created
#
    id=0
    for DIAG in ${DIAG_LIST[*]} ; do
        TARDIR="${DIAG}.${JOB_ID}"
        cd ${TARDIR}
        if [[ $ACSP_ECST -eq 1 ]] ; then
           if [[ ${ECMISS[$id]} -eq 1 ]] ; then
              tar -b 512 -cvf ${DIAG}_${ROOT1}_ps.tar ${ecdir}/.
              emkdir -p ec:${ECDISK_LONG}/${ecdir}/
              ecp -o ${DIAG}_${ROOT1}_ps.tar ec:${ECDISK_LONG}/${ecdir}/
              echmod 770 ec:${ECDISK_LONG}/${ecdir}/${DIAG}_${ROOT1}_ps.tar
           fi
        fi # ECSTORE
        cd ..
        \rm -rf ${TARDIR}
        id=$((id+1))
    done # id loop
#
    echo "End of start date "$MM
    im=$((im+1))
done #im
#
if [[ $ACSP_GIF = 1 ]] ; then
cat>>acc_map_$ie.html<<EOF
</br>
</body>
</html>
EOF
mv acc_map_$ie.html ${SMSGIF}/.
fi
#
date
echo "end of plot_acc_map.sms"
#
%include <tail.h>
