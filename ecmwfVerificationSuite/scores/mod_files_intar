cat<<\EOJ>job
#!/bin/ksh
#
#$ -S /usr/bin/ksh
        # Specifies the shell that parses the script. If not
        # specified, your login shell will be used.
#$ -q serial
        # Specifies that your job should be run in the queue
        # serial
#$ -N modfiles
        # Assigns the specified name to the request
#$ -o /scratch/rd/nep/waitqueue/$JOB_NAME.$HOSTNAME.$JOB_ID.out
        # Specifies the name and location of STDOUT. If not given
        # then the default filename is $JOBNAME.o$JOB_ID.
        # The file will be written in your $HOME directory,
        # by default.
#$ -j y
        # Join STDERR and STDOUT streams
#$ -V
        # Specifies that all environment variables from your shell
        # should be used. You can also list individual variables which
        # should be separated with semicolons.
#$ -m a
        # Specifies that email should be sent in case the job aborts.
        # Other options include beginning (-mb), ends (-me), never (-mn)
        # and suspended (-ms) (options can be combined).
        # The default is never (-mn).
#$ -M nep@ecmwf.int
        # Specifies the address(es) to which any email should
        # be sent.
#-------------------------------
# setting environment variables
#-------------------------------

export PATH=$PATH:.             # Allows you to run any of your programs or
                                # scripts held in the current directory (not
                                # required if already done in your .user_profile
                                # or .user_kshrc)
set -xv
#-------------------------------
# the programme
#-------------------------------
trap '{ echo "Killed by a signal"; ERROR ; }' 1 2 3 4 5 6 7 8 10 12 13 15
#
cd $TMPDIR
#
ECPATH="/ENSEMBLES/verify/data/ecmf/en/1004/s001/m001"
ECPATH="/ENSEMBLES/verify/data/egrr/en/1001/s001/m001"
ECPATH="/ENSEMBLES/verify/data/lfpw/en/1001/s000/m001"
ECPATH="/ENSEMBLES/verify/data/ifmk/en/1000/s001/m010"
ECPATH="/ENSEMBLES/verify/data/lfpw/en/2002/s000/m001"
ECPATH="/ENSEMBLES/verify/data/ecmf/en/2001/s001/m001"
ECPATH="/ENSEMBLES/verify/data/pp01"
ECPATH="/ENSEMBLES/verify/data/egrr/en/1503/s051/m010"
ECPATH="/ENSEMBLES/verify/data/mm11"
set -A DIAG_LST psfiles
set -A DIAG_LST clim psfiles
set -A DIAG_LST acc anom rel psfiles
set -A DIAG_LST acc
#
DATE="1960-2005_11"
DATE="1991-2001"
TAG="1980-2005_110100_CV01_I0_228"
TAG="1980-2005_110100_228"
TAG="167_000_001-001"
TAG="_Emm11_1991-2001_110100_CV01_I0_167_000_004-006_NHEX_S01000.ran"
for DIAG in ${DIAG_LST[*]} ; do
    els ec:${ECPATH}/${DIAG}/*${DATE}* > t1
    wc -l t1|cut -c 1-8|read totlin
    totlin=$((totlin-1))
    echo "Total number of files $totlin"
    tail -$totlin t1|cut -c 60- >t2
    set -A FILE_LST `cat t2`
    \rm -f t1 t2
#
    n=0
    for FILE in ${FILE_LST[*]} ; do
        echo $FILE > t3
        cut -c 1-3 t3|read DIA
        \rm -f t3
        ecp ec:${ECPATH}/${DIAG}/${FILE} .
        tar xvf ${FILE}
        rm -f ${FILE}
        if [[ $DIAG = psfiles ]] ; then
           cd psfiles
           rm -f *${TAG}*
           cd ..
           if [[ $DIA = BRV ]] ; then
              \rm -f tarfile.tar
              touch tarfile.tar
              set -A THR_LST 33 50 67
              for THR in ${THR_LST[*]} ; do
                  tar rf tarfile.tar psfiles/BRV*_T${THR}_*
                  rm -f BRV*_T${THR}_*
              done
              set -A DIA_LST BSS BSI REL RES ROC SHA
              for DIA in ${DIA_LST[*]} ; do
                  tar rf tarfile.tar psfiles/${DIA}*
                  rm -f ${DIA}*
              done
              mv tarfile.tar $FILE
           else
              tar cvf ${FILE} psfiles/*
           fi
           ecp -o ${FILE} ec:${ECPATH}/${DIAG}/.
           rm -rf *
        else
           rm -f *${TAG}*
           if [[ $DIA = BRV ]] ; then
              \rm -f tarfile.tar
              touch tarfile.tar
              set -A THR_LST 33 50 67
              for THR in ${THR_LST[*]} ; do
                  tar rf tarfile.tar BRV*_T${THR}_*
                  rm -f BRV*_T${THR}_*
              done
              set -A DIA_LST BSS BSI REL RES ROC SHA
              for DIA in ${DIA_LST[*]} ; do
                  tar rf tarfile.tar ${DIA}*
                  rm -f ${DIA}*
              done
              mv tarfile.tar $FILE
           else
              tar cvf ${FILE} *
           fi
           ecp -o ${FILE} ec:${ECPATH}/${DIAG}/.
           rm -f *
        fi
        n=$((n+1))
    done
done
#
exit 0
EOJ
qsub job
rm -f job
