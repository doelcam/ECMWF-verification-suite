%manual
NAME

  cal_acc_reg - Computes ACC for regions

DESCRIPTION

  Computes the area-averaged ensemble-mean scores

%end
%include <head.h>
%include <trap.h>
echo "start of cal_acc_reg.sms"
#
%include <sms_vars.h>
if [[ -a $SMSWORK ]] ; then
   cd $SMSWORK
else
   mkdir -p $SMSWORK
   cd $SMSWORK
fi
%include <config.h>
%include <def_exp2.h>
%include <def_exp3.h>
#
# Get running date
#
typeset -Z2 DAY
DAY=`date | cut -c9-10`
MON=`date | cut -c5-7`
YEA=`date | cut -c25-28`
DATE=${DAY}${MON}${YEA}
#
set -A DIAG_LIST ACC ACP SPR RSR MSS
typeset -Z5 NSAM
NSAM=$ACC_NSAM
#
# Loop over experiments
# In case of multi-model, compute for every model used
#
ie=%NUM%
if [[ $ie -ne 0 ]] ; then
   sleep 100
fi
#
# Get and compile fortran files
#
#rm -f cal_acc_reg.x
if [[ -a cal_acc_reg.x ]] ; then
   echo "Executable file present"
else
   if [[ $ie -eq 0 ]] ; then
      cp ${PATHSO}/cal_acc_reg.f .
      cp ${PATHSO}/tools.f .
     # pgf90 $COMPOP1 cal_acc_reg.f tools.f -o cal_acc_reg.x $LINKLI1 $LINKLI3
   gfortran $COMPOP1 cal_acc_reg.f tools.f -o cal_acc_reg.x $LINKLI1 $LINKLI3
   else
      echo "Compile by hand"
   fi
fi
ls -l cal_acc_reg.x
#
if [[ $ie -lt $NUMMOD ]] ; then
   export EXPID=${EXP_LIST[$ie]}
   export TYPID=${TYP_LIST[$ie]}
   if [[ $TYPID = 0 ]] ; then
      export ORIID=${ORI_LIST[$ie]}
      export CLAID=${CLA_LIST[$ie]}
      export METID=${MET_LIST[$ie]}
      export SYSID=${SYS_LIST[$ie]}
      export STRID=${STR_LIST[$ie]}
   else
      export ORIID=off
      export CLAID=off
      export METID=off
      export SYSID=off
      export STRID=off
   fi
   export NENS=${NEN_LIST[$ie]}
%include <def_exp1.h>
else
%include <sms_vars.h>
%include <def_exp3.h>
fi
#
# Land-sea mask
#
if [ -a LSM_${EXPID_LONG} ] ; then
   EX=cat
else
   EX=mars
fi
$EX <<@@
RETRIEVE,
   PARAM=172,
   TYPE=an,
   CLASS=od,
   LEVTYPE=sfc,
   EXPVER=1,
   STREAM=oper,
   DATE=20120707,
   REPRES=ll,
   GRID=2.5/2.5,
   AREA=${north}/${east}/${south}/${west},
   TARGET=LSM_${EXPID_LONG}
@@
#
# Loop over months
#
im=0
for MM in ${MM_LIST[*]} ; do
    echo "Start date "$MM
    DD=${DD_LIST[$im]}
    TT=${TT_LIST[$im]}
#
# Loop over diagnostic tar files
#
    id=0
    ECMISS=0 # This is 0 in case the tar file exists in ECFS
    for DIAG in ${DIAG_LIST[*]} ; do
        TARDIR=${DIAG}.${JOB_ID}
        \rm -rf ${TARDIR}
        mkdir ${TARDIR}
        cd ${TARDIR}
        ROOT=${DIAG}_${EXPID_LONG}_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
        ecp -o ec:${ECDISK_LONG}/acc/${ROOT}.tar . || echo "${ROOT}.tar is missing in ECFS"
        if [[ -s ${ROOT}.tar ]] ; then
           tar xvf ${ROOT}.tar
           \rm -f ${ROOT}.tar
           echo "WARNING: Files for the experiment already exist"
           echo "If you want to create new ones, remove the tar file from both ECFS and the working directory"
        else
           echo "All the files will be created and a new tar file archived"
           ECMISS=1 # This is 1 because the whole tar archive will be created and archived
        fi
        cd ..
        id=$((id+1))
    done #DIAG
#
# Loop over fields
#
    iz=0
    while [[ $iz -le $TOT_ANO_PAR ]] ; do
          PAR=${ANO_PAR[$iz]}
          LEV=${ANO_LEV[$iz]}
          YYS=$YY1
          YYE=$YY2
          if [[ $PAR = 228 ]] ; then
             if [[ $YY1 -lt $YY1_228 ]] ; then
                YYS=$YY1_228
             fi
          fi
#
# loop over lead time periods
#
          ip=0
          while [[ $ip -le $TOT_ALL_DIA ]] ; do
                IAFCM=${ALL_IAFCM[$ip]}
                IEFCM=${ALL_IEFCM[$ip]}
#
# Loop over diagnostic tar files
#
                compute_reg=1
                DIA_REG=""
                ir=0
                for REG in ${ALL_REG[*]} ; do
                    do_reg=1
                    id=0
                    for DIAG in ${DIAG_LIST[*]} ; do
                        TARDIR=${DIAG}.${JOB_ID}
                        ROOT=${DIAG}_${EXPID_LONG}_${YYS}-${YYE}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
#
# Check if all the ouput files exist
#


                        FILE=${ROOT}_${PAR}_${LEV}_${IAFCM}-${IEFCM}
                        if [[ -s ${TARDIR}/${FILE}_${REG} ]] ; then
                           echo "${FILE}_${REG} exists"
		    	    \rm -r ${TARDIR}/${FILE}_${REG}
			     echo "deleting file and recomupting"
			     do_reg=2
			   
			   
                        else
                           do_reg=2
                        fi
                        if [[ $ACC_BOOT -eq 1 ]] ; then
                           if [[ -s ${TARDIR}/${FILE}_${REG}_S${NSAM}.ran ]] ; then
                              echo "${FILE}_${REG}_S${NSAM}.ran exists"
		    	      \rm -r ${TARDIR}/${FILE}_${REG}_S${NSAM}.ran
			      echo "deleting file and recomupting"
			      do_reg=2
                           else
                              do_reg=2
                           fi
                        fi
                        id=$((id+1))
                    done # id loop
                    if [[ $FORCEACC = 1 ]] ; then
                       do_reg=2
                    fi
                    if [[ $do_reg == 2 ]] ; then
                       DIA_REG="${DIA_REG} ${REG}"
                       compute_reg=2
                    fi
                    ir=$((ir+1))
                done #REG loop
#
                set -A DIA_REG $DIA_REG
                REG_LST=""
                n=0
                while [[ $n -lt $TOT_REG ]] ; do
                      REG_LST="${REG_LST} 0"
                      n=$((n+1))
                done
                set -A REG_LST $REG_LST
                if [[ $compute_reg -eq 2 ]] ; then
                   for REG in ${DIA_REG[*]} ; do
                       n=0
                       while [[ $n -lt $TOT_REG ]] ; do
                             if [[ ${REG_NAM[$n]} == $REG ]] ; then
                                REG_LST[$n]=1
                             fi
                             n=$((n+1))
                       done
                   done
                fi
                rcal=""
                n=0
                while [[ $n -lt $TOT_REG ]] ; do
                      rcal="${rcal} ${REG_LST[$n]},"
                      n=$((n+1))
                done
cat > cacc_regcal_$ie << EOF
rcal=${rcal}
 /
EOF
#
# Compute ACC files if necessary
#
cat > acc_gen_$ie << EOF
 &control
  nx=${NX},
  ny=${NY},
  nmon=${NMON},
  nens=${NENS},
  iyy1=${YYS},
  iyy2=${YYE},
  imm=${MM},
  idd=${DD},
  itt=${TT},
  cros=${CROS},
  ipar=${PAR},
  ilev=${LEV},
  anin=${ANIN},
  nf1=${IAFCM},
  nf2=${IEFCM},
  expt='${EXPID_LONG}',
  boot=${ACC_BOOT},
  nsam=${ACC_NSAM},
  topth=${ACC_TOPTH},
  botth=${ACC_BOTTH},
  nreg=${TOT_REG},
 /
EOF
                if [[ $compute_reg -eq 2 ]] ; then
                   ECMISS=1 # The new tar file will have to be archived in ECFS
                   if [[ $PAR -eq 139 ]] ; then
                      cat acc_gen_$ie reglist_139 cacc_regcal_$ie > acc_reg_$ie
                   else
                      cat acc_gen_$ie reglist_std cacc_regcal_$ie > acc_reg_$ie
                   fi
                   ./cal_acc_reg.x < acc_reg_$ie
#
# Collect results
#
                   id=0
                   for DIAG in ${DIAG_LIST[*]} ; do
                       TARDIR=${DIAG}.${JOB_ID}
                       ROOT1=${DIAG}_${EXPID_LONG}_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
                       ROOT2=${DIAG}_${EXPID_LONG}_${YYS}-${YYE}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
                       FILE=${ROOT2}_${PAR}_${LEV}_${IAFCM}-${IEFCM}
                       for REG in ${DIA_REG[*]} ; do
                           if [[ -s ${FILE}_${REG} ]] ; then
                              mv ${FILE}_${REG} ${TARDIR}/
                           else
                              echo "There is a problem; ${FILE}_${REG} is supposed to exist"
                              exit
                           fi
                           if [[ $ACC_BOOT -eq 1 ]] ; then
                              if [[ -s ${FILE}_${REG}_S${NSAM}.ran ]] ; then
                                 mv ${FILE}_${REG}_S${NSAM}.ran ${TARDIR}/.
                              else
                                 echo "There is a problem; ${FILE}_${REG}_S${NSAM}.ran is supposed to exist"
                                 exit
                              fi
                           fi
                       done # REG loop
                       id=$((id+1))
                   done # id loop
                fi # endif compute for experiment
                ip=$((ip+1))
          done # ip endwhile
          iz=$((iz+1))
    done # iz endwhile
#
# Copy in ECFS if required
#
    emkdir -p ec:${ECDISK_LONG}/acc
    id=0
    for DIAG in ${DIAG_LIST[*]} ; do
        ROOT=${DIAG}_${EXPID_LONG}_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
        if [[ ${ECMISS} -eq 1 ]] ; then
           if [[ $ACSP_ECST -eq 1 ]] ; then
              TARDIR=${DIAG}.${JOB_ID}
              cd ${TARDIR}
              tar -b 128 -cvf ../${ROOT}.tar .
              cd ..
              ecp -o ${ROOT}.tar ec:${ECDISK_LONG}/acc/
              echmod 770 ec:${ECDISK_LONG}/acc/${ROOT}.tar
              \rm -f ${ROOT}.tar
           fi
        fi # ECSTORE
        rm -rf ${TARDIR}
        id=$((id+1))
    done # id loop
    echo "End of start date "$MM
    im=$((im+1))
done # MM loop 
#
date
echo "end of cal_acc_reg.sms"
#
%include <tail.h>
#
