%manual
NAME

  plot_ts - Plots the time series

DESCRIPTION

  Plots time series of hindcasts the corresponding reference along
  with a set of scores

%end
%include <head.h>
%include <trap.h>
echo "start of plot_ts.sms"
#
%include <sms_vars.h>
if [[ -a $SMSWORK ]] ; then
   cd $SMSWORK
else
   mkdir -p $SMSWORK
   cd $SMSWORK
fi
%include <config.h>
%include <def_exp2.h>
%include <def_exp3.h>
#
# Get running date
#
typeset -Z2 DAY
DAY=`date | cut -c9-10`
MON=`date | cut -c5-7`
YEA=`date | cut -c25-28`
DATE=${DAY}${MON}${YEA}
#
# Loop over experiments
# In case of multi-model, compute for every model used
#
ie=%NUM%
if [[ $ie -ne 0 ]] ; then
   sleep 100
fi
#
# Create gif directory, if not already existent
#
for ecdir in ${SMSGIF}/giffiles ; do
    if [[ -a $ecdir ]] ; then
       echo "directory for $ecdir exists already"
    else
       mkdir $ecdir
    fi
done
#
# Header for web page
#
TS_GIF=1
if [[ $TS_GIF = 1 ]] ; then
   if [[ -s ${SMSGIF}/PopBox/scripts/PopBox.js ]] ; then
      echo "Java script present"
   else
      cp -r /home/rd/ney/SkinLayer/sh/PopBox/ ${SMSGIF}/.
   fi
cat>ts_ori_$ie.html<<EOF
<html><head>
<title>Summary of time series for experiment $ie</title>
<link id="lnkStyleSheet" rel="stylesheet" type="text/css" href="PopBox/stylesheets/Styles.css" />
<script src="PopBox/scripts/PopBox.js"  type="text/javascript"></script>
</head>
<body>
EOF
   cp ts_ori_$ie.html ts_inf_$ie.html
fi
#
ecdir=psfiles
#
# Get and compile fortran files
#
if [[ -a plot_ts.x ]] ; then
   echo "Executable file present"
else
   if [[ $ie -eq 0 ]] ; then
      cp ${PATHSO}/plot_ts.f .
      cp ${PATHSO}/tools.f .
      cp ${PATHSO}/tools_plot.f .
      use magics
      pgf90 $COMPOP1 plot_ts.f tools.f tools_plot.f -o plot_ts.x $LINKLI2 $LINKLI1 $LINKLI3
   else
      echo "Compile by hand"
   fi
fi
ls -l plot_ts*.x
#
export EXPID=${EXP_LIST[$ie]}
if [[ $ie -lt $NUMMOD ]] ; then
   export TYPID=${TYP_LIST[$ie]}
   if [[ $TYPID = 0 ]] ; then
      export ORIID=${ORI_LIST[$ie]}
      export CLAID=${CLA_LIST[$ie]}
      export METID=${MET_LIST[$ie]}
      export SYSID=${SYS_LIST[$ie]}
      export STRID=${STR_LIST[$ie]}
   else
      export ORIID=off
      export CLAID=off
      export METID=off
      export SYSID=off
      export STRID=off
   fi
   export NENS=${NEN_LIST[$ie]}
%include <def_exp1.h>
else
%include <sms_vars.h>
%include <def_exp3.h>
fi
#
# Loop over months
#
im=0
for MM in ${MM_LIST[*]} ; do
    echo "Start date "$MM
    DD=${DD_LIST[$im]}
    TT=${TT_LIST[$im]}
#
# Create directories
#
    TARDIR="TS.${JOB_ID}"
    \rm -rf ${TARDIR}
    mkdir -p ${TARDIR}
    cp plot_ts.x ${TARDIR}/.
    cd ${TARDIR}
    mkdir ${ecdir}
#
    ECMISS=0 # This is 0 in case the tar file exists in ECFS
    ROOT=TS_${EXPID_LONG}_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
    ROOTREF=TS_refe_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
    TARFILE=${ROOT}_ps
    ecp -o ec:${ECDISK_LONG}/${ecdir}/${TARFILE}.tar . || echo "${TARFILE}.tar is missing in ECFS"
    if [[ -s ${TARFILE}.tar ]] ; then
       tar xvf ${TARFILE}.tar
       \rm -f ${TARFILE}.tar
       echo "WARNING: Files for the experiment already exist"
       echo "If you want to create new ones, remove the tar file from both ECFS and the working directory"
    else
       echo "All the files will be created and a new tar file archived"
       ECMISS=1 # This is 1 because the whole tar archive will be created and archived
    fi
#
# loop over lead time periods
#
    ip=0
    while [[ $ip -le $TOT_ALL_DIA ]] ; do
          IAFCM=${ALL_IAFCM[$ip]}
          IEFCM=${ALL_IEFCM[$ip]}
#
# Check if all the ouput files exist
#
          compute_pro=1
          NAM_LST=""
          PAR_LST=""
          LEV_LST=""
          YYS_LST=""
          YYE_LST=""
          n=0
          for TS in ${TSDIA[*]} ; do
              set +xv
              m=0
              for NAM in ${TS_NAM[*]} ; do
                  if [[ $TS == $NAM ]] ; then
                     echo "Considering the time series $NAM"
                     PAR=${TS_PAR[$m]}
                     LEV=${TS_LVL[$m]}
                  fi
                  m=$((m+1))
              done
              m=0
              for NAM in ${PRO_NAM[*]} ; do
                  if [[ $TS == $NAM ]] ; then
                     echo "Considering the projection index $NAM"
                     PAR=${PRO_PAR[$m]}
                     LEV=${PRO_LEV[$m]}
                  fi
                  m=$((m+1))
              done
              set -xv
              YYS=$YY1
              YYE=$YY2
              if [[ $PAR = 228 ]] ; then
                 if [[ $YY1 -lt $YY1_228 ]] ; then
                    YYS=$YY1_228
                 fi
              fi
              ROOT=TS_${EXPID_LONG}_${YYS}-${YYE}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
              FILE=${ROOT}_${PAR}_${LEV}_${IAFCM}-${IEFCM}_${TS}
              if [[ -s ${ecdir}/${FILE}.ps && $FORCETS = 0 ]] ; then
                 echo "${FILE}.ps exists"
                 if [[ $TS_GIF = 1 ]] ; then
                    for PAGE in 1 2 ; do
                        psselect -p${PAGE} ${ecdir}/${FILE}.ps ${ecdir}/${FILE}_${PAGE}.ps
                        convert -rotate 90 ${ecdir}/${FILE}_${PAGE}.ps ${SMSGIF}/giffiles/${FILE}_${PAGE}.gif
                        \rm -f ${ecdir}/${FILE}_${PAGE}.ps
cat>toto<<EOF
<div style="margin: 0.5em 0.8em 0.5em 0; float:left">
<img id="${FILE}_${PAGE}.gif" alt="${FILE}_${PAGE}.gif"
src="giffiles/${FILE}_${PAGE}.gif"
pbshowcaption="true"
pbcaption="${FILE}_${PAGE}.gif"
style="width: 525px; height: 350px;"
class="PopBoxImageSmall" title="Click to magnify/shrink"
onclick="Pop(this,50,'PopBoxImageLarge');" /><br />
<span style="font-size:xx-small">${FILE}_${PAGE}.gif</span>
</div>
EOF
                        if [[ $PAGE = 1 ]] ; then
                           cat toto >> ../ts_ori_$ie.html
                        fi
                        if [[ $PAGE = 2 ]] ; then
                           cat toto >> ../ts_inf_$ie.html
                        fi
                    done
                 fi
              else
                 NAM_LST="${NAM_LST} ${TS}"
                 PAR_LST="${PAR_LST} ${PAR}"
                 LEV_LST="${LEV_LST} ${LEV}"
                 YYS_LST="${YYS_LST} ${YYS}"
                 YYE_LST="${YYE_LST} ${YYE}"
                 n=$((n+1))
              fi
          done
          NTS=$n
          set -A NAM_LST $NAM_LST
          set -A PAR_LST $PAR_LST
          set -A LEV_LST $LEV_LST
          set -A YYS_LST $YYS_LST
          set -A YYE_LST $YYE_LST
#
          namet=""
          par=""
          lev=""
          yy1=""
          yy2=""
          n=0
          while [[ $n -lt $NTS ]] ; do
                namet="${namet} '${NAM_LST[$n]}',"
                par="${par} ${PAR_LST[$n]},"
                lev="${lev} ${LEV_LST[$n]},"
                yy1="${yy1} ${YYS_LST[$n]},"
                yy2="${yy2} ${YYE_LST[$n]},"
                n=$((n+1))
          done
          if [[ $NTS -gt 0 ]] ; then
             while [[ $n -lt 80 ]] ; do
                   namet="${namet} 'NONE',"
                   par="${par} 999,"
                   lev="${lev} 999,"
                   yy1="${yy1} 999,"
                   yy2="${yy2} 999,"
                   n=$((n+1))
             done
#
# Plot the time series if necessary
#
cat > plots_$ie << EOF
 &control
  nens=${NENS},
  imm=${MM},
  idd=${DD},
  itt=${TT},
  cros=${CROS},
  anin=${ANIN},
  nf1=${IAFCM},
  nf2=${IEFCM},
  expt='${EXPID_LONG}',
  nts=${NTS},
 /
EOF
cat > plots_rcal_$ie << EOF
 &timeseries
  namet=${namet}
  par=${par}
  lev=${lev}
  yy1=${yy1}
  yy2=${yy2}
 /
EOF
             ROOT=TS_${EXPID_LONG}_${YY1}-${YY2}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
             if [[ -s ${ROOT}.tar ]] ; then
                echo "Results already available"
             else
                ecp -o ec:${ECDISK_LONG}/ts/${ROOT}.tar . || echo "${ROOT}.tar missing in ECFS"
                tar xvf ${ROOT}.tar
             fi
             if [[ -s ${ROOTREF}.tar ]] ; then
                echo "Results already available"
             else
                ecp -o ec:${ECDISK}/data/refe/ts/${ROOTREF}.tar . || echo "${ROOTREF}.tar missing in ECFS"
                tar xvf ${ROOTREF}.tar
             fi
#
             ECMISS=1 # The new tar file will have to be archived in ECFS
             cat plots_$ie plots_rcal_$ie > plots_list_$ie
             ./plot_ts.x < plots_list_$ie
#
# Collect results
#
             n=0
             while [[ $n -lt $NTS ]] ; do
                   NAM=${NAM_LST[$n]}
                   PAR=${PAR_LST[$n]}
                   LEV=${LEV_LST[$n]}
                   YYS=${YYS_LST[$n]}
                   YYE=${YYE_LST[$n]}
                   ROOT=TS_${EXPID_LONG}_${YYS}-${YYE}_${MM}${DD}${TT}_CV${CROS}_I${ANIN}
                   FILE=${ROOT}_${PAR}_${LEV}_${IAFCM}-${IEFCM}_${NAM}
                   if [[ -s ${ecdir}/${FILE}.ps ]] ; then
                      echo "File ${ecdir}/${FILE}.ps correctly created"
                      if [[ $TS_GIF = 1 ]] ; then
                         for PAGE in 1 2 ; do
                             psselect -p${PAGE} ${ecdir}/${FILE}.ps ${ecdir}/${FILE}_${PAGE}.ps
                             convert -rotate 90 ${ecdir}/${FILE}_${PAGE}.ps ${SMSGIF}/giffiles/${FILE}_${PAGE}.gif
                             \rm -f ${ecdir}/${FILE}_${PAGE}.ps
cat>toto<<EOF
<div style="margin: 0.5em 0.8em 0.5em 0; float:left">
<img id="${FILE}_${PAGE}.gif" alt="${FILE}_${PAGE}.gif"
src="giffiles/${FILE}_${PAGE}.gif"
pbshowcaption="true"
pbcaption="${FILE}_${PAGE}.gif"
style="width: 525px; height: 350px;"
class="PopBoxImageSmall" title="Click to magnify/shrink"
onclick="Pop(this,50,'PopBoxImageLarge');" /><br />
<span style="font-size:xx-small">${FILE}_${PAGE}.gif</span>
</div>
EOF
                             if [[ $PAGE = 1 ]] ; then
                                cat toto >> ../ts_ori_$ie.html
                             fi
                             if [[ $PAGE = 2 ]] ; then
                                cat toto >> ../ts_inf_$ie.html
                             fi
                         done
                      fi
                   else
                      echo "There is a problem; the file ${ecdir}/${FILE}.ps is supposed to exist"
                      exit
                   fi
                   n=$((n+1))
             done
          fi # NTS gt 0
          ip=$((ip+1))
    done # ip endwhile
#
# Copy in ECFS if required
#
    emkdir -p ec:${ECDISK_LONG}/ts
    if [[ $TS_ECST -eq 1 ]] ; then
       if [[ ${ECMISS} -eq 1 ]] ; then
          tar -b 512 -cvf ${TARFILE}.tar ${ecdir}/.
          ecp -o ${TARFILE}.tar ec:${ECDISK_LONG}/${ecdir}/
          echmod 770 ec:${ECDISK_LONG}/${ecdir}/${TARFILE}.tar
          \rm -f ${TARFILE}.tar
       fi
    fi # ECSTORE
#
    cd ..
    \rm -rf ${TARDIR}
    echo "End of start date "$MM
    im=$((im+1))
done # MM loop 
#
if [[ $TS_GIF = 1 ]] ; then
cat>>ts_ori_$ie.html<<EOF
</br>
</body>
</html>
EOF
cat>>ts_inf_$ie.html<<EOF
</br>
</body>
</html>
EOF
   ls -l ts_*_$ie.html
   mv ts_*_$ie.html ${SMSGIF}/.
fi
#
date
echo "end of plot_ts.sms"
#
%include <tail.h>
#
