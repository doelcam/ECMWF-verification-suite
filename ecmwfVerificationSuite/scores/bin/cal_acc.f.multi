c
c----------------------------------------------------------------------c
c     PROGRAM cal_acc                     F. Doblas-Reyes, 11-Aug-2006 c
c                                                                      c
c     PURPOSE:                                                         c
c     Calculates anomaly correlation coefficient (ACC), perfect-model  c
c     ACC (ACP), ratio between spread (in terms of standard deviation) c
c     and RMSE (SPR), and mean square skill score (MSS) at grid        c
c     points.                                                          c
c     The ACC and MSS are also computed averaged over                  c
c     regions for individual ensembles and the ensemble mean.          c
c     It also computes confidence intervals for regional values.       c
c                                                                      c
c     INPUT:                                                           c
c     ANOM_EXPT_YYYY-YYYY_MMDDTT_CV_IN_PAR_LEV_YYYY GRIB files         c
c                                                                      c
c     OUTPUT:                                                          c
c     DIA_EXPT_YYYY-YYYY_MMDDTT_CV_IN_PAR_LEV GRIB files (global map)  c 
c     DIA_EXPT_YYYY-YYYY_MMDDTT_CV_IN_PAR_LEV_REGI ASCII files (reg)   c
c                                                                      c
c     USAGE:                                                           c
c     cal_acc.x < nlist                                                c
c                                                                      c
c     COMPILING:                                                       c
c     pgf90 -pg -O3 cal_acc.f tools.f -o cal_acc.x $EMOSLIB $NAGLIB    c
c                                                                      c
c     MODS:                                                            c
c                                         F. Doblas-Reyes, 02-Feb-2006 c
c     Based on the original cal_acc_con.f from DEMETER                 c
c                                         F. Doblas-Reyes, 26-Jul-2006 c
c     Adapted to the linux machines                                    c
c                                                                      c
c----------------------------------------------------------------------c
c
      program cal_acc
c
      implicit none
c
c.... define allocatable fields
c
      real, allocatable:: psec4_acc(:), psec4_acp(:)
      real, allocatable:: psec4_mss(:), psec4_spr(:)
      real, allocatable:: ano_mod(:,:,:,:), ano_ref(:,:,:,:)
      real, allocatable:: ref(:), reo(:), sim(:), sie(:,:), weight (:)
      real, allocatable:: regwgt(:), latwgt(:)
      real, allocatable:: rms_mod(:,:)
      real, allocatable:: rms_ref(:,:)
      real, allocatable:: rms_cov(:,:)
      real, allocatable:: rms_mse(:,:)
      real, allocatable:: rmst_mod(:)
      real, allocatable:: rmst_ref(:)
      real, allocatable:: rmst_cov(:)
      real, allocatable:: rmst_mse(:)
      real, allocatable:: acc(:)
      real, allocatable:: mss(:)
      real, allocatable:: x(:)
      integer, allocatable :: ivfdate(:,:), istep(:,:)
      integer, allocatable:: lsm(:)
      real, allocatable:: emean(:,:)
c
c.... GRIB headers
c
      integer ksec0(2), kret
      integer ksec1(1024)
      integer ksec1_sav(1024)
      integer ksec2(1024)
      integer ksec3(2)
      integer ksec4(512)
c
      real psec2(512)
      real psec3(2)
c
c.... other definitions
c
      character yifile*75, yofile*90, yrfile*90
      character*5 form1
      character*30 form2
      character*21 expt, expti
      real xlats, xlatn, xlonw, xlone
      real sdx, sdy, cov
      real sdxs, sdys, covs
      real spr, mse
      real yhlp, xhlp
      real eps, totwgt
      real ave, adev, sdev, var, skew, curt
      double precision epsdd, cor
      integer nx, ny, nmon, nens
      integer iyy1, iyy2, imm, idd, itt
      integer ipar, ilev, anin, nf1, nf2, nreg, cros, idatetype
      integer lena, istat, klenp, exptl
      integer nxny, nensp1, nensm1, nyear, idat
      integer i, nummon, num1, num2
      integer imon, iens, jens, ie, ir, iy, ik
      integer iunit, ounit1, ounit2, ounit3, ounit4
      integer iilsm, icatch
      integer imod
c
c.... hard coded field definitions
c
      integer nreg_max
      parameter(nreg_max=30)
      character*4 namr(nreg_max)
      real limn(nreg_max), lims(nreg_max) 
      real limw(nreg_max), lime(nreg_max)
      integer ilsm(nreg_max), rcal(nreg_max)
c
      namelist /control/   nx,   ny, nmon, nens,
     >                   iyy1, iyy2,  imm,  idd,  itt,
     >                   cros, ipar, ilev, anin,  nf1,  nf2,
     >                   expt, nreg
      namelist /region/  namr, limn, lims, limw, lime, ilsm, rcal
c
c.... set default values and read input namelists
c
      nx = 144
      ny = 71
      nmon = 6
      nens = 9 
      iyy1 = 0
      iyy2 = 0
      imm  = 11
      idd  = 1
      itt  = 0
      cros = 1
      ipar = 139
      ilev = 000
      anin = 0
      expt = 'scwc'
      nreg = 12
c
      read(5,control)
      write(*,*)'  nx: ', nx
      write(*,*)'  ny: ', ny
      write(*,*)'nmon: ',nmon
      write(*,*)'nens: ',nens
      write(*,*)'iyy1: ',iyy1
      write(*,*)'iyy2: ',iyy2
      write(*,*)' imm: ',imm
      write(*,*)' idd: ',idd
      write(*,*)' itt: ',itt
      write(*,*)'cros: ',cros
      write(*,*)'ipar: ',ipar
      write(*,*)'ilev: ',ilev
      write(*,*)'expt: ',expt
      write(*,*)'anin: ',anin
      write(*,*)' nf1: ',nf1
      write(*,*)' nf2: ',nf2
      write(*,*)'nreg: ',nreg
c
      if(nreg.gt.nreg_max)then
        write(*,*)'Problems with the number of regions'
        goto 998
      endif
      read(5,region)
      write(*,*)'namr: ',(namr(i),i=1,nreg)
      write(*,*)'limn: ',(limn(i),i=1,nreg)
      write(*,*)'lims: ',(lims(i),i=1,nreg)
      write(*,*)'limw: ',(limw(i),i=1,nreg)
      write(*,*)'lime: ',(lime(i),i=1,nreg)
      write(*,*)'ilsm: ',(ilsm(i),i=1,nreg)
      write(*,*)'rcal: ',(rcal(i),i=1,nreg)
c
      nensm1 = nens-1
      nensp1 = nens+1
      nxny=nx*ny
      klenp=nxny
      nyear=iyy2-iyy1+1
c
c.... allocate fields
c
      allocate (psec4_acc(klenp),                            stat=istat)
      allocate (psec4_acp(klenp),                            stat=istat)
      allocate (psec4_mss(klenp),                            stat=istat)
      allocate (psec4_spr(klenp),                            stat=istat)
      allocate (ano_mod(nxny,nmon,nens,nyear),               stat=istat)
      allocate (ano_ref(nxny,nmon,1,nyear),                  stat=istat)
      allocate (ivfdate(nmon,nyear),                         stat=istat)
      allocate (istep(nmon,nyear),                           stat=istat)
      allocate (regwgt(nxny),                                stat=istat)
      allocate (latwgt(nxny),                                stat=istat)
      allocate (lsm(nxny),                                   stat=istat)
      allocate (rms_mod(nyear,nensp1),                       stat=istat)
      allocate (rms_ref(nyear,nensp1),                       stat=istat)
      allocate (rms_cov(nyear,nensp1),                       stat=istat)
      allocate (rms_mse(nyear,nensp1),                       stat=istat)
      allocate (rmst_mod(nensp1),                            stat=istat)
      allocate (rmst_ref(nensp1),                            stat=istat)
      allocate (rmst_cov(nensp1),                            stat=istat)
      allocate (rmst_mse(nensp1),                            stat=istat)
      allocate (acc(nensp1),                                 stat=istat)
      allocate (mss(nensp1),                                 stat=istat)
c
c.... reset fields
c
      eps      = 1.e-30
      epsdd    = tiny(epsdd)
      write(*,*)'Smallest value ',epsdd
c
c.... loop over reading model and reference data
c....    idat=1 for model
c....    idat=2 for reference
c
      do idat=1,2
         expti=expt
         if(idat.eq.2)then
            expti = 'refe'
         endif
         exptl=lena(expti)
         write(form1,'(a,i2.2,a)')'(a',exptl,')'
c
c.... read all years of anomalies
c
         do iy=1,nyear
            yifile='ANOM_EXPT_YYYY-YYYY_MMDDTT_CVYY_II_PAR_LEV_YYYY'
            write(yifile(       6: 5+exptl),form1)expti(1:exptl)
            write(yifile( 6+exptl: 6+exptl),'(a1)')'_'
            write(yifile( 7+exptl:10+exptl),'(i4.4)')iyy1
            write(yifile(11+exptl:11+exptl),'(a1)')'-'
            write(yifile(12+exptl:15+exptl),'(i4.4)')iyy2
            write(yifile(16+exptl:16+exptl),'(a1)')'_'
            write(yifile(17+exptl:18+exptl),'(i2.2)')imm
            write(yifile(19+exptl:20+exptl),'(i2.2)')idd
            write(yifile(21+exptl:22+exptl),'(i2.2)')itt
            write(yifile(23+exptl:25+exptl),'(a3)')'_CV'
            write(yifile(26+exptl:27+exptl),'(i2.2)')cros
            write(yifile(28+exptl:29+exptl),'(a2)')'_I'
            if(idat.eq.2)then
              write(yifile(30+exptl:30+exptl),'(i1.1)')0
            else
              write(yifile(30+exptl:30+exptl),'(i1.1)')anin
            endif
            write(yifile(31+exptl:31+exptl),'(a1)')'_'
            write(yifile(32+exptl:34+exptl),'(i3.3)')ipar
            write(yifile(35+exptl:35+exptl),'(a1)')'_'
            write(yifile(36+exptl:38+exptl),'(i3.3)')ilev
            write(yifile(39+exptl:39+exptl),'(a1)')'_'
            write(yifile(40+exptl:43+exptl),'(i4.4)')iyy1+iy-1
            write(*,*)'open input file: ',yifile
            kret=0
            call pbopen(iunit,yifile,'r',kret)
            if(kret.ne.0)then
              write(*,*)'Error in opening file: kret=',kret
              goto 997
            endif
c
c.... read input data and close file
c
            if(idat.eq.1)then
              idatetype=0
              call readgrb(iunit, nxny, nmon, nens, idat,
     >            imm, iyy1, iy, ipar, ilev, idatetype,
     >            ano_mod(1,1,1,iy), ivfdate(1,iy), istep(1,iy),
     >            ksec0, ksec1_sav, ksec2, ksec3, ksec4, psec2, psec3)
            endif
            if(idat.eq.2)then
              idatetype=2
              call readgrb(iunit, nxny, nmon, 1, idat,
     >            imm, iyy1, iy, ipar, ilev, idatetype,
     >            ano_ref(1,1,1,iy), ivfdate(1,iy), istep(1,iy),
     >            ksec0, ksec1, ksec2, ksec3, ksec4, psec2, psec3)
            endif
            call pbclose(iunit,kret)
            if(kret.ne.0)then
              write(*,*)'Error in closing file: kret=',kret
              goto 997
            endif
         enddo !iy loop
      enddo !idat loop
c
c.... calculate acc at every grid point (average of variances/covariances
c.... over nyear before computing ACC)
c
      nummon=nf2-nf1+1
c
c.... open output files for global maps
c
      exptl=lena(expt)
      write(form1,'(a,i2.2,a)')'(a',exptl,')'
      yofile='ACC_EXPT_YYYY-YYYY_MMDDTT_CVYY_II_PAR_LEV_AAA-EEE'
      write(yofile(       5: 4+exptl),form1)expt(1:exptl)
      write(yofile( 5+exptl: 5+exptl),'(a1)')'_'
      write(yofile( 6+exptl: 9+exptl),'(i4.4)')iyy1
      write(yofile(10+exptl:10+exptl),'(a1)')'-'
      write(yofile(11+exptl:14+exptl),'(i4.4)')iyy2
      write(yofile(15+exptl:15+exptl),'(a1)')'_'
      write(yofile(16+exptl:17+exptl),'(i2.2)')imm
      write(yofile(18+exptl:19+exptl),'(i2.2)')idd
      write(yofile(20+exptl:21+exptl),'(i2.2)')itt
      write(yofile(22+exptl:24+exptl),'(a3)')'_CV'
      write(yofile(25+exptl:26+exptl),'(i2.2)')cros
      write(yofile(27+exptl:28+exptl),'(a2)')'_I'
      write(yofile(29+exptl:29+exptl),'(i1.1)')anin
      write(yofile(30+exptl:30+exptl),'(a1)')'_'
      write(yofile(31+exptl:33+exptl),'(i3.3)')ipar
      write(yofile(34+exptl:34+exptl),'(a1)')'_'
      write(yofile(35+exptl:37+exptl),'(i3.3)')ilev
      write(yofile(38+exptl:38+exptl),'(a1)')'_'
      write(yofile(39+exptl:41+exptl),'(i3.3)')nf1
      write(yofile(42+exptl:42+exptl),'(a1)')'-'
      write(yofile(43+exptl:45+exptl),'(i3.3)')nf2
      write(*,*)'open output file: ',yofile
      kret=0
      call pbopen(ounit1,yofile,'w',kret)
      if(kret.ne.0)then
        write(*,*)'Error in opening file: kret=',kret
        goto 997
      endif
      write(yofile(       3:       3),'(a1)')'P'
      write(*,*)'open output file: ',yofile
      kret=0
      call pbopen(ounit2,yofile,'w',kret)
      if(kret.ne.0)then
        write(*,*)'Error in opening file: kret=',kret
        goto 997
      endif
      write(yofile(       1:       3),'(a3)')'SPR'
      write(*,*)'open output file: ',yofile
      kret=0
      call pbopen(ounit3,yofile,'w',kret)
      if(kret.ne.0)then
        write(*,*)'Error in opening file: kret=',kret
        goto 997
      endif
      write(yofile(       1:       3),'(a3)')'MSS'
      write(*,*)'open output file: ',yofile
      call pbopen(ounit4,yofile,'w',kret)
      if(kret.ne.0)then
        write(*,*)'Error in opening file: kret=',kret
        goto 997
      endif
c
      allocate (ref(nyear),                                  stat=istat)
      allocate (reo(nyear),                                  stat=istat)
      allocate (sie(nens,nyear),                             stat=istat)
      allocate (sim(nyear),                                  stat=istat)
      allocate (weight(nyear),                               stat=istat)
      allocate (emean(3,nyear),                             stat=istat)
      do i=1,klenp
c
c.... compute the scores for the target period
c
c.... compute the ensemble-mean correlation
c.... substract the climatology of the anomalies, in case it is
c.... very different from zero
c
         do iy=1,nyear
            reo(iy)=0.
            do iens=1,nens
               sie(iens,iy)=0.
            enddo
            weight(iy)=1.
            do imon=nf1,nf2
               reo(iy)=reo(iy)+ano_ref(i,imon,1,iy)
c              if(i.eq.1000)
c    >            write(*,*)iy,imon,ano_ref(i,imon,1,iy) 
               do iens=1,nens
                  sie(iens,iy)=sie(iens,iy)+ano_mod(i,imon,iens,iy)
c                 if(i.eq.1000)
c    >               write(*,*)iy,imon,iens,ano_mod(i,imon,iens,iy) 
               enddo
            enddo
            reo(iy)=reo(iy)/nummon
            sim(iy)=0.
            do iens=1,nens
               sie(iens,iy)=sie(iens,iy)/nummon
               sim(iy)=sim(iy)+sie(iens,iy)/nens
            enddo
            ref(iy)=reo(iy)
c           if(i.eq.1000)
c    >         write(*,*)'ACC: i=',i,'iy=',iy,ref(iy),sim(iy)
         enddo !iy loop
         call varcovar(ref, sim, nyear, weight, 1, sdx, sdy, cov)
         cor=cov/(sdx*sdy+epsdd)
c        write(*,'(i5,4e12.4)')i,' covariances and correlation ',
c    >      cor, sdx, sdy, cov
         psec4_acc(i) = cor
c
c.... compute the MSSS
c
         allocate (x(nyear),                                 stat=istat)
         do iy=1,nyear
            x(iy)=sim(iy)-ref(iy)
         enddo !iy loop
         call moment(x, nyear, ave, adev, sdev, var, skew, curt)
         mse=var
         deallocate (x,                                      stat=istat)
         call moment(ref, nyear, ave, adev, sdev, var, skew, curt)
         psec4_mss(i) = 1.-mse/var
c
c.... compute the ratio spread/RMSE
c.... substract the climatology of the anomalies, in case it is
c.... very different from zero
c
         spr=0.
         allocate (x(nens),                                  stat=istat)
         do iy=1,nyear
            do iens=1,nens
               x(iens)=sie(iens,iy)
            enddo
            call moment(x, nens, ave, adev, sdev, var, skew, curt)
            spr=spr+var/nyear
         enddo !iy loop
         deallocate (x,                                      stat=istat)
         allocate (x(nyear),                                 stat=istat)
         do iy=1,nyear
            x(iy)=sim(iy)-ref(iy)
         enddo !iy loop
         call moment(x, nyear, ave, adev, sdev, var, skew, curt)
         deallocate (x,                                      stat=istat)
         psec4_spr(i) = sqrt(spr/(var+eps))
c
c.... compute the perfect-model correlation
c
         do imod=1,3
            do iy=1,nyear
               emean(imod,iy)=0.
               do iens=1,9
                  emean(imod,iy)=emean(imod,iy)+sie(iens+(imod-1)*9,iy)
               enddo
               emean(imod,iy)=emean(imod,iy)/9
            enddo
         enddo

         do jens=1,3
c           if(i.eq.1000)write(*,*)'jens=',jens
            covs=0.
            sdxs=0.
            sdys=0.
            do iy=1,nyear
               sim(iy)=0.
               do iens=1,3
                  if(iens.ne.jens)then
                    sim(iy)=sim(iy)+emean(iens,iy)/2
                  else
                    ref(iy)=emean(iens,iy)
                  endif
               enddo !iens loop
c              if(i.eq.1000)
c    >            write(*,*)'ACP: i=',i,'iy=',iy,ref(iy),sim(iy)
            enddo !iy loop
            call varcovar(ref, sim, nyear, weight, 1, sdx, sdy, cov)
            covs=covs+cov
            sdxs=sdxs+sdx**2
            sdys=sdys+sdy**2
         enddo !jens loop
         sdxs=sqrt(sdxs)
         sdys=sqrt(sdys)
         cor=covs/(sdxs*sdys+epsdd)
c        write(*,*)sdxs,sdys,cor
         psec4_acp(i) = cor
      enddo !i loop
c
c.... write output in GRIB file
c
      do ik=1,1024
         ksec1(ik)=ksec1_sav(ik)
      enddo !ik loop
      write(*,*)'Write ACC'
      call writegrb(ounit1, nxny, psec4_acc,
     >   ksec0, ksec1, ksec2, ksec3, ksec4, psec2, psec3)
      write(*,*)'Write ACP'
      call writegrb(ounit2, nxny, psec4_acp,
     >   ksec0, ksec1, ksec2, ksec3, ksec4, psec2, psec3)
      write(*,*)'Write Spread'
      call writegrb(ounit3, nxny, psec4_spr,
     >   ksec0, ksec1, ksec2, ksec3, ksec4, psec2, psec3)
      write(*,*)'Write MSSS'
      call writegrb(ounit4, nxny, psec4_mss,
     >   ksec0, ksec1, ksec2, ksec3, ksec4, psec2, psec3)
c
      deallocate (reo,                                       stat=istat)
      deallocate (ref,                                       stat=istat)
      deallocate (sie,                                       stat=istat)
      deallocate (sim,                                       stat=istat)
      deallocate (weight,                                    stat=istat)
c
c.... loop over regions
c
      write(form2,'(a,i2.2,a)')'(i8,',(nens+1),'f10.4)'
      write(*,*)'Output format ',form2
      do ir=1,nreg
         if(rcal(ir).eq.1)then
c
c.... select parameters for the region
c
           write(*,*)'Computing for region: ',namr(ir)
           iilsm=ilsm(ir)
           xlats=lims(ir)
           xlatn=limn(ir)
           xlonw=limw(ir)
           xlone=lime(ir)
           icatch = 0
           call get_mask(iilsm,lsm,nxny,expt)
c          write(*,*)'lsm'
c          write(*,'(40i4)')(lsm(i),i=1,nxny)
c          write(*,*) xlats, xlatn, xlonw, xlone
           call get_region(icatch,xlats,xlatn,xlonw,xlone,
     >        nxny,expt,'/vol/demeter/verify',regwgt,latwgt)
c          write(*,*)'regwgt'
c          write(*,'(40f4.1)')(regwgt(i),i=1,nxny)
c          write(*,*)'latwgt'
c          write(*,'(20f8.3)')(latwgt(i),i=1,nxny)
           num1=0
           do i=1,klenp
              if(regwgt(i).gt.0.)num1=num1+1
           enddo
c
c.... open output file for yearly data of regional averaged rmsss
c
           write(yofile(       1:       3),'(a3)')'ACC'
           yrfile=yofile(1:lena(yofile))//'_'//namr(ir)
           write(*,*)'open output file: ',yrfile
           open(10,file=yrfile,form='formatted',status='unknown')
           write(yrfile(       1:       3),'(a3)')'MSS'
           write(*,*)'open output file: ',yrfile
           open(11,file=yrfile,form='formatted',status='unknown')
c
c.... allocations
c
           allocate (ref(num1),                              stat=istat)
           allocate (sim(num1),                              stat=istat)
           allocate (weight(num1),                           stat=istat)
c
c.... computation for single members
c
           write(10,'(2i8)')nf1,nf2
           do iy=1,nyear
              do iens=1,nensp1
                 rmst_mod(iens)=0.
                 rmst_ref(iens)=0.
                 rmst_cov(iens)=0.
                 rmst_mse(iens)=0.
c
c.... accumulate squared error over months and region for single 
c.... ensemble members and for the ensemble mean (nensp1)
c
                 totwgt=0.
                 num2=0
                 do i=1,klenp
                    if(regwgt(i).gt.0.)then
                      num2=num2+1
                      xhlp=0.
                      yhlp=0.
                      do imon=nf1,nf2
                         if(iens.le.nens)then
                           xhlp=xhlp+ano_mod(i,imon,iens,iy)
                         else
                           do ie=1,nens
                              xhlp=xhlp+ano_mod(i,imon,ie,iy)
                           enddo
                         endif
                         yhlp=yhlp+ano_ref(i,imon,1,iy)
                      enddo !imon
                      sim(num2)=xhlp/float(nummon)
                      ref(num2)=yhlp/float(nummon)
                      weight(num2)=lsm(i)*latwgt(i)
                      totwgt=totwgt+weight(num2)
                    endif
                 enddo !i
c                write(*,*)'Number of points',num1,num2
                 call varcovar(ref, sim, num1, weight, 0, sdx, sdy, cov)
                 rms_mod(iy,iens)=sdy
                 rms_ref(iy,iens)=sdx
                 rms_cov(iy,iens)=cov
                 rmst_mod(iens)=rmst_mod(iens)+rms_mod(iy,iens)**2
                 rmst_ref(iens)=rmst_ref(iens)+rms_ref(iy,iens)**2
                 rmst_cov(iens)=rmst_cov(iens)+rms_cov(iy,iens)**2
                 allocate (x(num2),                          stat=istat)
                 do i=1,num2
                    x(i)=sim(i)-ref(i)
                 enddo !i
                 call moment(x, num2, ave, adev, sdev, var, skew, curt)
                 rms_mse(iy,iens)=sdev
                 rmst_mse(iens)=rmst_mse(iens)+rms_mse(iy,iens)**2
                 mss(iens)=1.-var/(sdx**2)
                 deallocate (x,                              stat=istat)
c
c.... calculate acc
c
                 acc(iens)=rms_cov(iy,iens)/
     >              (rms_ref(iy,iens)*rms_mod(iy,iens)+eps)
              enddo !iens
c
c.... write results to ascii file
c
              write(10,form2)iyy1+iy-1,(acc(iens),iens=1,nensp1) 
              write(11,form2)iyy1+iy-1,(mss(iens),iens=1,nensp1) 
           enddo !iy loop
c
c... calc time average ACC and write to output file
c
           do iens=1,nensp1
              acc(iens)=rmst_cov(iens)/
     >           sqrt(rmst_ref(iens)*rmst_mod(iens)+eps)
              mss(iens)=1.-rmst_mse(iens)/rmst_ref(iens)
           enddo
           write(10,form2)9999,(acc(iens),iens=1,nensp1)
           write(11,form2)9999,(mss(iens),iens=1,nensp1)
           close(10)
           close(11)
           deallocate (ref,                                  stat=istat)
           deallocate (sim,                                  stat=istat)
           deallocate (weight,                               stat=istat)
         endif
      enddo
c
      goto 999
 997  continue
      if(kret.ne.0)then
        goto 998
      else
        goto 999
      endif
 998  write(*,*)'Sorry, no success :('
      call abort
 999  write(*,*)'program seems to be successfully finished :)'
c
      end
c
